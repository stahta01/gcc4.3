
# ranlib doesn't exist, so define it to 'true' to make it a no-op
RANLIB_FOR_TARGET = true

# Stubs for libgcc defined by m6809 are here
LIB1ASMSRC = m6809/libgcc1.s

# Here are the functions that are implemented within libgcc1.s
LIB1ASMFUNCS = _mulhi3 _divhi3 _modhi3 _udivhi3 _umodhi3 \
	_euclid _seuclid _clzsi2 _clzdi2 _ctzsi2 _ctzdi2 \
	_ashlhi3 _ashrhi3 _lshrhi3 _m0 _m4 _im0 _im4 _fm0 _fm4

# Software emulation for integer div and mod
LIB2FUNCS_EXTRA = $(srcdir)/config/udivmodsi4.c $(srcdir)/config/udivmod.c $(srcdir)/config/divmod.c
LIB2FUNCS_EXCLUDE = _divdi3 _moddi3 _udivdi3 _umoddi3 _udivmoddi4

# Flags to use when building libgcc.  IN_GCC does not seem necessary,
# although the compile breaks without it.  -DDF=SF is required to set
# the size of "double" to the same as the size of a "float".
TARGET_LIBGCC2_CFLAGS = -DIN_GCC -Dinhibit_libc -DDF=SF -DLIBGCC2_HAS_SF_MODE=0 -DLIBGCC2_HAS_DF_MODE=0

LIB2ADDEH =
LIB2ADDEHSTATIC =
LIB2ADDEHSHARED =

LIBGCC2_DEBUG_CFLAGS =
LIBGCC2_CFLAGS = -Os $(LIBGCC2_INCLUDES) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) -DIN_LIBGCC2

# Multilib information
# This creates multiple versions of libgcc.a for each set of incompatible
# -mxxx options.
MULTILIB_OPTIONS  = fpic mdret
MULTILIB_DIRNAMES =
MULTILIB_MATCHES  =
MULTILIB_EXCEPTIONS =
EXTRA_MULTILIB_PARTS = crt0.o

LIBGCC = stmp-multilib
INSTALL_LIBGCC = install-multilib

# We want fine grained libraries, so use the new code to build the
# floating point emulation libraries.
FPBIT = fp-bit.c

fp-bit.c: $(srcdir)/config/fp-bit.c
	echo '#define FLOAT' > fp-bit.c
	echo '#define FLOAT_ONLY' >> fp-bit.c
	echo '#define CMPtype HItype' >> fp-bit.c
	echo '#define SMALL_MACHINE' >> fp-bit.c
	echo '#ifdef __LITTLE_ENDIAN__' >> fp-bit.c
	echo '#define FLOAT_BIT_ORDER_MISMATCH' >>fp-bit.c
	echo '#endif' 		>> fp-bit.c
	echo '#define DI SI'	>> fp-bit.c
	cat $(srcdir)/config/fp-bit.c >> fp-bit.c

# crt0.o is built from the following source file
CRT0_S = $(srcdir)/config/m6809/crt0.S
MCRT0_S = $(srcdir)/config/m6809/crt0.S

# Flags to use when building crt0.o
CRT0STUFF_T_CFLAGS += -fno-builtin -nostartfiles -nostdlib

# Assemble startup files.
$(T)crt0.o: $(CRT0_S) $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(CRT0STUFF_T_CFLAGS) $(MULTILIB_CFLAGS) -c -o $(T)crt0.o -x assembler-with-cpp $(CRT0_S)

$(T)mcrt0.o: $(MCRT0_S) $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(CRT0STUFF_T_CFLAGS) $(MULTILIB_CFLAGS) -c -o $(T)mcrt0.o -x assembler-with-cpp $(MCRT0_S)

# Use the sjlj unwind.
LIB2ADDEH = $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c
LIB2ADDEHDEP = unwind.inc
