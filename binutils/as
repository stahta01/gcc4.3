#!/bin/sh
#
# Copyright 2006 by Brian Dominy <brian@oddchange.com>
#
# Changes by David Flamand <dflamand@gmail.com> (June 2016)
#  - more robust and verbose in case of error
#
# This file is part of GCC6809.
#
# GCC6809 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# GCC6809 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC6809; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

# This script is a frontend to the as6809 assembler, to make it
# look more like GNU as.  Not all as features are supported here.
# It basically translates as style options into as6809 format.

set -e
IFS=' '

as_prefix=@AS_PREFIX@
bindir=${as_prefix}/bin

showversion () {
cat <<END
as (m6809) [GNU assembler frontend] 0.3 20160608
This program is free software; you may redistribute it under the terms of
the GNU General Public License.  This program has absolutely no warranty.
END
}

# Output a message to stderr and exit with a failure code.
error ()
{
	echo "as (m6809): $1" >&2
	exit 1
}

# Assume nothing.
input_file=
list_file=
gen_list_file=
incpath=
verbose=
version=

# Default output filename.
output_file=a.out

# The -o option causes an object file to be created.
# The -g option causes undefined symbols to be made global.
options=-og

# Parse the command-line options.  See the GNU 'as' man page for
# an explanation of all these options.  Our goal is to translate
# them into as6809 form.
while [ $# -gt 0 ]; do
	arg=$1; shift
	case $arg in
############################################################
# these are custom assember options (no GNU as equivalent) #
		-m6809)
			true
			;;
		-gn)
			# Generate NoICE debug symbols
			options="${options}j"
			;;
		-gs)
			# Generate SDCC debug symbols
			options="${options}y"
			;;
############################################################
		--globalize-symbols)
			# Make all symbols global
			options="${options}a"
			;;
		-m*)
			error "invalid CPU option '$arg'"
			;;
		--)
			error "standard input not supported"
			;;
		-a*)
			options="${options}lc"
			gen_list_file=X
			;;
		-I)
			if [ $# -lt 1 ]; then
				error "missing path after '$arg'"
			fi
			incpath="$incpath -I $1"
			shift
			;;
		-I*)
			incpath="$incpath -I ${arg#-I}"
			;;
		-MD)
			error "assembler option '$arg' not supported"
			;;
		-o)
			output_file=$1; shift
			;;
		-v|-verbose|--verbose)
			verbose=-v
			;;
		-version|--version)
			version=X
			;;
		-help|--help)
			cat $0 # TODO
			exit 0
			;;
		-D|-f|-K|--traditional-format|-w|-x|-Z|-W|--no-warn)
			# These options are accepted but ignored by GNU as.
			true
			;;
		=*)
			# Set the name of the listing file
			list_file=${arg#=}
			;;
		-*)
			error "unrecognized option '$arg'"
			;;
		*)
			if [ -n "$input_file" ]; then
				error "more than one input file specified"
			fi
			if [ "${arg%.*}" = "$arg" ]; then
				error "input file '$arg' without extension"
			fi
			input_file=$arg
			;;
	esac
done

# Setup various file name.
if [ -n "$USEAS09" -o -n "$AS09OPT" ]; then
	asoutput_file=$output_file
else
	asoutput_file=${input_file%\.*}.rel
fi
if [ -n "$gen_list_file" ]; then
	aslist_file=${input_file%\.*}.lst
	if [ -z "$list_file" ]; then
		list_file=$aslist_file
	fi
fi

# Output version information.
if [ -n "$version" -o -n "$verbose" ]; then
	showversion
fi
if [ -n "$version" ]; then
	exit 0
fi

# Output more information when --verbose option is set.
if [ -n "$verbose" ]; then
	if [ -n "$USEAS09" -o -n "$AS09OPT" ]; then
		echo "as09link $verbose $AS09OPT -c -h $incpath -o $asoutput_file $input_file"
	else
		echo "$bindir/as6809 $options $input_file"
	fi
	echo "Output file: '$output_file'"
	if [ -n "$gen_list_file" ]; then
		echo "List file: '$list_file'"
	fi
fi

# Exit if no input files given.
# We don't support redirecting from standard input.
if [ -z "$input_file" ]; then
	if [ -n "$verbose" ]; then
		exit 0
	fi
	error "no input file specified"
fi

# Invoke the real assembler with translated options.
if [ -n "$USEAS09" -o -n "$AS09OPT" ]; then
	set +e
	as09link $verbose $AS09OPT -c -h $incpath -o "$asoutput_file" "$input_file"
	rc=$?
	set -e
else
	set +e
	$bindir/as6809 $options "$input_file"
	rc=$?
	set -e
fi

# OK, see if the assembler succeeded or not.
# If it failed, the source is copied to /tmp/as6809_error.s
# so that it can be inspected.  GCC will normally delete any
# temporary .s files that it generates.  This makes debugging
# the compiler easier.
#
# Also, as6809 still creates a .o file even on an error;
# that can confuse 'make'.  So delete the output file.
if [ "$rc" != "0" ]; then
	# Make sure that the input file is valid before copying.
	if [ -f "$input_file" ]; then
		cp -p "$input_file" /tmp/as6809_error.s || true
	fi
	rm -f "$asoutput_file"
	if [ -n "$gen_list_file" ]; then
		rm -f "$aslist_file"
	fi
	exit $rc
fi

# as6809 creates the output file with the same name as the
# input file, but with a .rel extension.  The user may want
# a different filename altogether, so honor that request here.
if [ "$asoutput_file" != "$output_file" ]; then
	mv "$asoutput_file" "$output_file"
fi

# Same as above but for the list file with a .lst extension.
if [ -n "$gen_list_file" -a "$aslist_file" != "$list_file" ]; then
	mv "$aslist_file" "$list_file"
fi

exit 0
